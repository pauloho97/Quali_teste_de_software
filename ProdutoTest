package aula;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class ProdutoTest {
	
	// Testes para a função estática processarCadastro
	
	@Test
	void processarCadastroSucesso() {
		// arrange
		String entrada = "1;banana;17.40";
		ArrayList<Produto> lista = new ArrayList<>();
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertTrue(resultado);
	}

	@Test
	void processarCadastroRegrasSplitFalha() {
		// arrange
		String entrada = ""; // entrada inválida
		ArrayList<Produto> lista = new ArrayList<>();
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void processarCadastroConectarFalha() {
		// arrange
		String entrada = "1;uva;17"; // entrada válida, mas repetida
		ArrayList<Produto> lista = new ArrayList<>();
		Produto produtoExistente = new Produto(1, "banana", 17.40f);
		lista.add(produtoExistente);
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void processarCadastroEntradaMalFormatada() {
		// arrange
		String entrada = "abc;produto;preco"; // entrada mal formatada
		ArrayList<Produto> lista = new ArrayList<>();
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado, "A função retorna false ao receber uma entrada mal formatada.");
	}

	@Test
	void processarCadastroComCodigoRepetido() {
		// arrange
		String entrada = "1;banana;17.40"; // entrada válida
		ArrayList<Produto> lista = new ArrayList<>();
		Produto produtoExistente = new Produto(1, "banana", 17.40f);
		lista.add(produtoExistente);
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado); // Deve falhar devido ao código duplicado
	}

	@Test
	void processarCadastroNomeVazio() {
		// arrange
		String entrada = "1;;17.40"; // nome vazio
		ArrayList<Produto> lista = new ArrayList<>();
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado); // Deve falhar devido ao nome vazio
	}

	@Test
	void processarCadastroPrecoNegativo() {
		// arrange
		String entrada = "1;banana;-1"; // preço negativo
		ArrayList<Produto> lista = new ArrayList<>();
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado); // Deve falhar devido ao preço negativo
	}

	@Test
	void processarCadastroPrecoZero() {
		// arrange
		String entrada = "1;banana;0"; // preço zero
		ArrayList<Produto> lista = new ArrayList<>();
		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.processarCadastro(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado); // Deve falhar devido ao preço zero
	}
	
	// Testes para a função regrasSplit
	@Test
	void RegrasSplitSucesso() {
		// arrange
		String entrada = "123;pp;17";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertTrue(resultado);

	}

	@Test
	void RegrasSplitNulo() {
		// arrange
		String entrada = "";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void RegrasSplitLength2() {
		// arrange
		String entrada = ";nome;17.50";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void RegrasSplitLength1() {
		// arrange
		String entrada = "1;;";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void RegrasSplitNomeVazio() {
		// arrange
		String entrada = "1;;1";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void RegrasSplitPrecoNegativo() {
		// arrange
		String entrada = "1;nome;-1";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void RegrasSplitPrecoPositivo() {
		// arrange
		String entrada = "1;nome;1";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertTrue(resultado);
	}

	@Test
	void RegrasSplitPrecoZero() {
		// arrange
		String entrada = "1;nome;0";

		// act
		Boolean resultado = Produto.RegrasSplit(entrada);

		// assert
		Assertions.assertFalse(resultado);
	}
	
	//Testa a excessão
	@Test
	void testarNumberFormatException() {
		String entrada = "abc;produto;preco";

		// A entrada "abc" no lugar do código e "preco" no lugar do valor numérico
		// causará uma NumberFormatException
		boolean resultado = Produto.RegrasSplit(entrada);

		Assertions.assertFalse(resultado, "A função retorna false ao receber uma entrada mal formatada.");
	}

	//Testes para a função conectarListaeBD
	@Test
	void ListaComCodigoRepetido() {
		// arrange
		ArrayList<Produto> lista = new ArrayList<>();
		Produto entrada = new Produto(1, "banana", 17.40f);
		lista.add(entrada);
		String entradaDuplicada = "1;uva;17";

		/*
		 * CONCEITO NOVO: AQUI A FUNÇÃO MOKITO APENAS SIMULA UM BANCO DE DADOS
		 * BancoDadosProduto banco = Mockito.mock(BancoDadosProduto.class);
		 */

		BancoDadosProduto banco = new BancoDadosProduto();

		// act
		boolean resultado = Produto.conectarListaeBD(entradaDuplicada, lista, banco);
		
		//assert
		Assertions.assertFalse(resultado);
	}

	@Test
	void ListaSucesso() {
		// Arrange
		BancoDadosProduto banco = new BancoDadosProduto();// criação banco
		ArrayList<Produto> lista = new ArrayList<>();// criação lista
		String entrada = "1;banana;17.40"; // Código que será inserido

		// Act
		boolean resultado = Produto.conectarListaeBD(entrada, lista, banco);

		// Assert
		Assertions.assertTrue(resultado);
	}

	@Test
	void TestarExcessao() {
		// Arrange
		BancoDadosProduto banco = new BancoDadosProduto();
		ArrayList<Produto> lista = new ArrayList<>();
		String entrada = "1;banana;";

		// act
		boolean resultado = Produto.conectarListaeBD(entrada, lista, banco);

		// assert
		Assertions.assertFalse(resultado);
	}
}
